function _typeof(n){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}!function(n,t){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((n="undefined"!=typeof globalThis?globalThis:n||self).wasmhelper={})}(this,function(n){"use strict";var s=function(n,t){return t?(void 0===t.env&&(t.env={}),["emscripten_resize_heap","emscripten_memcpy_big","emscripten_notify_memory_growth","emscripten_asm_const_int"].forEach(function(n){"function"!=typeof t.env[n]&&(t.env[n]=function(){})}),void 0===t.wasi_snapshot_preview1&&(t.wasi_snapshot_preview1={}),["proc_exit"].forEach(function(n){"function"!=typeof t.wasi_snapshot_preview1[n]&&(t.wasi_snapshot_preview1[n]=function(){})}),"function"==typeof WebAssembly.instantiateStreaming?WebAssembly.instantiateStreaming(fetch(n),t):fetch(n).then(function(n){return n.arrayBuffer()}).then(function(n){return WebAssembly.instantiate(n,t)})):"function"==typeof WebAssembly.compileStreaming?WebAssembly.compileStreaming(fetch(n)):fetch(n).then(function(n){return n.arrayBuffer()}).then(function(n){return WebAssembly.compile(n)})},f="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0,t=console.warn.bind(console);function p(n){p.shown||(p.shown={}),p.shown[n]||(p.shown[n]=1,t(n))}var l={lengthBytesUTF8:function(n){for(var t=0,e=0;e<n.length;++e){var r=n.charCodeAt(e);(r=55296<=r&&r<=57343?65536+((1023&r)<<10)|1023&n.charCodeAt(++e):r)<=127?++t:t+=r<=2047?2:r<=65535?3:4}return t},stringToUTF8:function(n,t,e,r){if(!(0<r))return 0;for(var o=t instanceof ArrayBuffer?new Uint8Array(t):t,t=e,i=e+r,s=0;s<n.length;++s){var a=n.charCodeAt(s);if((a=55296<=a&&a<=57343?65536+((1023&a)<<10)|1023&n.charCodeAt(++s):a)<=127){if(i<=e)break;o[e++]=a}else if(a<=2047){if(i<=e+1)break;o[e++]=192|a>>6,o[e++]=128|63&a}else if(a<=65535){if(i<=e+2)break;o[e++]=224|a>>12,o[e++]=128|a>>6&63,o[e++]=128|63&a}else{if(i<=e+3)break;2097152<=a&&p("Invalid Unicode code point 0x"+a.toString(16)+" encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x1FFFFF)."),o[e++]=240|a>>18,o[e++]=128|a>>12&63,o[e++]=128|a>>6&63,o[e++]=128|63&a}}return o[e]=0,e-t},UTF8ToString:function(n,t,e){for(var r=n instanceof ArrayBuffer?new Uint8Array(n):n,o=t+e,i=t;r[i]&&!(o<=i);)++i;if(16<i-t&&r.subarray&&f)return f.decode(r.subarray(t,i));for(var s="";t<i;){var a,u,c=r[t++];128&c?(a=63&r[t++],192!=(224&c)?(u=63&r[t++],(c=224==(240&c)?(15&c)<<12|a<<6|u:(240!=(248&c)&&p("Invalid UTF-8 leading byte 0x"+c.toString(16)+" encountered when deserializing a UTF-8 string in wasm memory to a JS string!"),(7&c)<<18|a<<12|u<<6|63&r[t++]))<65536?s+=String.fromCharCode(c):(u=c-65536,s+=String.fromCharCode(55296|u>>10,56320|1023&u))):s+=String.fromCharCode((31&c)<<6|a)):s+=String.fromCharCode(c)}return s}};function e(n,e){var r=this;this.HEAP8=null,this.HEAP16=null,this.HEAP32=null,this.HEAPU8=null,this.HEAPU16=null,this.HEAPU32=null,this.HEAPF32=null,this.HEAPF64=null,this.exports=null,this.memory=null,this.stack=0;function t(n){var t=n.exports;if(!t)throw new Error("no exports");if(i=!0,"object"===_typeof(t.memory))r.memory=t.memory;else{if("object"!==_typeof(e.env.memory))throw new Error("no memory buffer");r.memory=e.env.memory}n=r.memory.buffer,r.HEAP8=new Int8Array(n),r.HEAP16=new Int16Array(n),r.HEAP32=new Int32Array(n),r.HEAPU8=new Uint8Array(n),r.HEAPU16=new Uint16Array(n),r.HEAPU32=new Uint32Array(n),r.HEAPF32=new Float32Array(n),r.HEAPF64=new Float64Array(n),r.exports=t,o.forEach(function(n){return n.call(r)}),o.length=0}var o=[],i=!1;this.ready=function(n){"function"==typeof n&&(i?n.call(r):o.push(n))},"string"==typeof n?s(n,e).then(function(n){t(n.instance)}):t(n)}e.prototype.ccall=function(n,t,e){var r=this.exports,o=this,i={string:function(n){var t,e=0;return null!=n&&0!==n&&(t=1+(n.length<<2),e=r.stackAlloc(t),l.stringToUTF8(n,o.HEAPU8,e,t)),e},array:function(n){var t=o.HEAP32.BYTES_PER_ELEMENT,e=r.stackAlloc(n.length*t);return o.HEAP32.set(n,e/t),e}};var s=[],a=0;if(e)for(var u=0;u<e.length;u++){var c=i[Array.isArray(e[u])?"array":_typeof(e[u])];c?(0===a&&(a=r.stackSave()),s[u]=c(e[u])):s[u]=e[u]}var f,n=r[n].apply(null,s);return f=n,n="string"===t?l.UTF8ToString(o.HEAPU8,f):"boolean"===t?Boolean(f):f,0!==a&&r.stackRestore(a),n},e.prototype.mem2str=function(n,t){return l.UTF8ToString(this.HEAPU8,n,t)},e.prototype.str2mem=function(n){var t=l.lengthBytesUTF8(n),e=this.malloc(t+1);return l.stringToUTF8(n,this.HEAPU8,e,t),e},e.prototype.arr2mem=function(n){var t=this.heap(1<arguments.length&&void 0!==arguments[1]?arguments[1]:"i32"),e=t.BYTES_PER_ELEMENT,r=this.malloc(n.length*e);return t.set(n,r/e),r},e.prototype.mem2arr=function(n,t){var e=this.heap(2<arguments.length&&void 0!==arguments[2]?arguments[2]:"i32"),n=n/e.BYTES_PER_ELEMENT;return Array.from(e.subarray(n,n+t))},e.prototype.malloc=function(n){var t=this.exports,e=0;if("function"==typeof t.malloc)e=t.malloc(n);else{var r=t.stackSave();if(r<n)throw new Error("stack overflow");0===this.stack&&(this.stack=r),e=t.stackAlloc(n)}return e},e.prototype.free=function(){var t=this.exports;if("function"==typeof t.free){for(var n=arguments.length,e=new Array(n),r=0;r<n;r++)e[r]=arguments[r];e.forEach(function(n){t.free(n)})}this.stack&&(t.stackRestore(this.stack),this.stack=0)},e.prototype.heap=function(){switch(0<arguments.length&&void 0!==arguments[0]?arguments[0]:"i32"){case"i8":return this.HEAP8;case"i16":return this.HEAP16;case"u8":return this.HEAPU8;case"u16":return this.HEAPU16;case"u32":return this.HEAPU32;case"float":return this.HEAPF32;case"double":return this.HEAPF64;default:return this.HEAP32}},e.prototype.grow=function(n){return this.memory.grow(n)};var a="wasminit",u="\nconst UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;\nconst err = console.warn.bind(console);\nfunction warnOnce(text) {\n  if (!warnOnce.shown) warnOnce.shown = {};\n  if (!warnOnce.shown[text]) {\n    warnOnce.shown[text] = 1;\n    err(text);\n  }\n}\nfunction lengthBytesUTF8(str) {\n  var len = 0;\n  for (var i = 0; i < str.length; ++i) {\n    var u = str.charCodeAt(i);\n    if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;\n    if (u <= 127) ++len;\n    else if (u <= 2047) len += 2;\n    else if (u <= 65535) len += 3;\n    else len += 4;\n  }\n  return len;\n}\n/*\n * @description: c字符数组转js字符串\n * @param {TpyeArray|ArrayBuffer} buffOrArr: \n * @param {Number} idx: 开始地址\n * @param {Number} maxBytesToRead: 读取数量（可选）\n */\nfunction UTF8ToString(buffOrArr, idx, maxBytesToRead) {\n  const heap = buffOrArr instanceof ArrayBuffer ? new Uint8Array(buffOrArr) : buffOrArr;\n  var endIdx = idx + maxBytesToRead;\n  var endPtr = idx;\n  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;\n  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {\n    return UTF8Decoder.decode(heap.subarray(idx, endPtr));\n  } else {\n    var str = '';\n    while (idx < endPtr) {\n      var u0 = heap[idx++];\n      if (!(u0 & 128)) {\n        str += String.fromCharCode(u0);\n        continue;\n      }\n      var u1 = heap[idx++] & 63;\n      if ((u0 & 224) == 192) {\n        str += String.fromCharCode((u0 & 31) << 6 | u1);\n        continue;\n      }\n      var u2 = heap[idx++] & 63;\n      if ((u0 & 240) == 224) {\n        u0 = (u0 & 15) << 12 | u1 << 6 | u2;\n      } else {\n        if ((u0 & 248) != 240) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string in wasm memory to a JS string!');\n        u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heap[idx++] & 63;\n      }\n      if (u0 < 65536) {\n        str += String.fromCharCode(u0);\n      } else {\n        var ch = u0 - 65536;\n        str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);\n      }\n    }\n  }\n  return str;\n}\n/*\n * @description: c字符数组转js字符串\n * @param {String} buffOrArr: \n * @param {TpyeArray|ArrayBuffer} heap: \n * @param {Number} outIdx: 开始地址\n * @param {Number} maxBytesToWrite: \n */\nfunction stringToUTF8(str, buffOrArr, outIdx, maxBytesToWrite) {\n  if (!(maxBytesToWrite > 0)) return 0;\n  const heap = buffOrArr instanceof ArrayBuffer ? new Uint8Array(buffOrArr) : buffOrArr;\n  var startIdx = outIdx;\n  var endIdx = outIdx + maxBytesToWrite;\n  for (var i = 0; i < str.length; ++i) {\n    var u = str.charCodeAt(i);\n    if (u >= 55296 && u <= 57343) {\n      var u1 = str.charCodeAt(++i);\n      u = 65536 + ((u & 1023) << 10) | u1 & 1023;\n    }\n    if (u <= 127) {\n      if (outIdx >= endIdx) break;\n      heap[outIdx++] = u;\n    } else if (u <= 2047) {\n      if (outIdx + 1 >= endIdx) break;\n      heap[outIdx++] = 192 | u >> 6;\n      heap[outIdx++] = 128 | u & 63;\n    } else if (u <= 65535) {\n      if (outIdx + 2 >= endIdx) break;\n      heap[outIdx++] = 224 | u >> 12;\n      heap[outIdx++] = 128 | u >> 6 & 63;\n      heap[outIdx++] = 128 | u & 63;\n    } else {\n      if (outIdx + 3 >= endIdx) break;\n      if (u >= 2097152) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x1FFFFF).');\n      heap[outIdx++] = 240 | u >> 18;\n      heap[outIdx++] = 128 | u >> 12 & 63;\n      heap[outIdx++] = 128 | u >> 6 & 63;\n      heap[outIdx++] = 128 | u & 63;\n    }\n  }\n  heap[outIdx] = 0;\n  return outIdx - startIdx;\n}\n\nvar utils = {\n  lengthBytesUTF8,\n\tstringToUTF8,\n\tUTF8ToString\n}\n\nfunction WASM(instance, importObject) {\n  this.HEAP8 = null;\n  this.HEAP16 = null;\n  this.HEAP32 = null;\n  this.HEAPU8 = null;\n  this.HEAPU16 = null;\n  this.HEAPU32 = null;\n  this.HEAPF32 = null;\n  this.HEAPF64 = null;\n  this.exports = null;\n  this.memory = null;\n  this.stack = 0;\n\n  const callbacks = [];\n  let isInit = false;\n  const init = ({ exports }) => {\n    if (!exports) throw new Error('no exports');\n    isInit = true;\n    if (typeof exports.memory === 'object') {\n      this.memory = exports.memory;\n    } else if (typeof importObject.env.memory === 'object') {\n      this.memory = importObject.env.memory;\n    } else {\n      throw new Error('no memory buffer');\n    }\n    const buf = this.memory.buffer;\n    this.HEAP8 = new Int8Array(buf);\n    this.HEAP16 = new Int16Array(buf);\n    this.HEAP32 = new Int32Array(buf);\n    this.HEAPU8 = new Uint8Array(buf);\n    this.HEAPU16 = new Uint16Array(buf);\n    this.HEAPU32 = new Uint32Array(buf);\n    this.HEAPF32 = new Float32Array(buf);\n    this.HEAPF64 = new Float64Array(buf);\n    this.exports = exports;\n    callbacks.forEach(fn => fn.call(this));\n    callbacks.length = 0;\n  };\n  this.ready = (fn) => {\n    if (typeof fn !== 'function') return;\n    if (isInit) fn.call(this);\n    else callbacks.push(fn);\n  };\n  if (typeof instance === 'string') {\n    load(instance, importObject).then((res) => {\n      init(res.instance);\n    });\n  } else {\n    init(instance);\n  }\n}\n/*\n * @description: 调用c函数\n * @param {String} ident: c函数名称\n * @param {String} returnType: 返回值类型{string|number|boolean|null}\n * @param {Array} args: 参数数组\n * @return {Any}\n */\nWASM.prototype.ccall = function (ident, returnType, args) {\n  const exports = this.exports;\n  const self = this;\n  var toC = {\n    'string': function (str) {\n      var ret = 0;\n      if (str !== null && str !== undefined && str !== 0) {\n        var len = (str.length << 2) + 1;\n        ret = exports.stackAlloc(len);\n        utils.stringToUTF8(str, self.HEAPU8, ret, len);\n      }\n      return ret;\n    },\n    'array': function (arr) {\n      const bytes = self.HEAP32.BYTES_PER_ELEMENT;\n      var ret = exports.stackAlloc(arr.length * bytes);\n      self.HEAP32.set(arr, ret / bytes);\n      return ret;\n    }\n  };\n\n  function convertReturnValue(ret) {\n    if (returnType === 'string') return utils.UTF8ToString(self.HEAPU8, ret);\n    if (returnType === 'boolean') return Boolean(ret);\n    return ret;\n  }\n  var cArgs = [];\n  var stack = 0;\n  if (args) {\n    for (var i = 0; i < args.length; i++) {\n      const type = Array.isArray(args[i]) ? 'array' : typeof args[i];\n      var converter = toC[type];\n      if (converter) {\n        if (stack === 0) stack = exports.stackSave();\n        cArgs[i] = converter(args[i]);\n      } else {\n        cArgs[i] = args[i];\n      }\n    }\n  }\n  var ret = exports[ident].apply(null, cArgs);\n  ret = convertReturnValue(ret);\n  if (stack !== 0) exports.stackRestore(stack);\n  return ret;\n};\n/*\n * @description: 从内存获取字符串\n * @param {Number} ptr: buffer offset\n * @param {Number} size: 字符串长度（可选）\n * @return {String}\n */\nWASM.prototype.mem2str = function (ptr, size) {\n  return utils.UTF8ToString(this.HEAPU8, ptr, size);\n};\n/*\n * @description: 把字符串放入内存\n * @param {String} str: 字符串\n * @return {Number} buffer offset\n */\nWASM.prototype.str2mem = function (str) {\n  const size = utils.lengthBytesUTF8(str);\n  const ptr = this.malloc(size + 1);\n  utils.stringToUTF8(str, this.HEAPU8, ptr, size);\n  return ptr;\n};\n/*\n * @description: 把数组放入内存\n * @param {Array} arr: 数组\n * @param {String} type: 类型（可选）\n * @return {Number} buffer offset\n */\nWASM.prototype.arr2mem = function (arr, type = 'i32') {\n  const heap = this.heap(type);\n  const bytes = heap.BYTES_PER_ELEMENT;\n  const ptr = this.malloc(arr.length * bytes);\n  heap.set(arr, ptr / bytes);\n  return ptr;\n};\n/*\n * @description: 从内存读取数组\n * @param {Number} ptr: buffer offset\n * @param {Number} length: 读取长度\n * @param {String} type: 类型（可选）\n * @return {Array}\n */\nWASM.prototype.mem2arr = function (ptr, length, type = 'i32') {\n  const heap = this.heap(type);\n  const pos = ptr / heap.BYTES_PER_ELEMENT;\n  return Array.from(heap.subarray(pos, pos + length));\n};\n/*\n * @description: 分配内存\n * @param {Number} bytes: 字节长度\n * @return {Number}\n */\nWASM.prototype.malloc = function (bytes) {\n  const exports = this.exports;\n  let ptr = 0;\n  if (typeof exports.malloc === 'function') {\n    ptr = exports.malloc(bytes);\n  } else {\n    const stack = exports.stackSave();\n    if (bytes > stack) {\n      throw new Error('stack overflow');\n    }\n    if (this.stack === 0) {\n      this.stack = stack;\n    }\n    ptr = exports.stackAlloc(bytes);\n  }\n  return ptr;\n};\n/*\n * @description: 释放内存\n * @param {...Number} args: buffer offset\n */\nWASM.prototype.free = function (...args) {\n  const exports = this.exports;\n  if (typeof exports.free === 'function') {\n    args.forEach((ptr) => {\n      exports.free(ptr);\n    });\n  }\n  if (this.stack) {\n    exports.stackRestore(this.stack);\n    this.stack = 0;\n  }\n};\n/*\n * @description: 获取内存\n * @param {String} type: i32:HEAP32,i8:HEAP8,i16:HEAP16,u8:HEAPU8,u16:HEAPU16,u32:HEAPU32,float:HEAPF32,double:HEAPF64\n * @return {TypeArray}\n */\nWASM.prototype.heap = function (type = 'i32') {\n  switch (type) {\n  case 'i8':\n    return this.HEAP8;\n  case 'i16':\n    return this.HEAP16;\n  case 'u8':\n    return this.HEAPU8;\n  case 'u16':\n    return this.HEAPU16;\n  case 'u32':\n    return this.HEAPU32;\n  case 'float':\n    return this.HEAPF32;\n  case 'double':\n    return this.HEAPF64;\n  default:\n    return this.HEAP32;\n  }\n};\n\nlet _instance = null;\nvar wasm = null;\nlet _defaultFn = function () {}\nif (typeof importObject !== 'object') {\n  importObject = {};\n}\nif (typeof importObject.env !== 'object') {\n  importObject.env = {}\n}\nimportObject.env.emscripten_resize_heap = importObject.env.emscripten_resize_heap || _defaultFn;\nimportObject.env.emscripten_memcpy_big = importObject.env.emscripten_memcpy_big || _defaultFn;\nlet _initWASM = function (e) {\n  if (e.data.type === '".concat(a,"') {\n    WebAssembly.instantiate(e.data.mod, importObject).then(function(instance) {\n      _instance = instance;\n      wasm = new Proxy(new WASM(instance), {\n        get: (obj, k) => {\n          if (k in obj) {\n            return obj[k]\n          }\n          if (k in obj.exports) {\n            return obj.exports[k]\n          }\n        },\n        set: (obj, k, val) => {\n          const exclude = [\n            'malloc',\n            'free',\n            'exports',\n            'memory',\n            'HEAP8',\n            'HEAP16',\n            'HEAP32',\n            'HEAPU8',\n            'HEAPU16',\n            'HEAPU32',\n            'HEAPF32',\n            'HEAPF64',\n          ]\n          if (exclude.includes(k)) {\n            return false\n          }\n          obj[k] = val\n          return true\n        }\n      })\n      postMessage({\n        type: 'wasmready'\n      })\n    });\n    removeEventListener('message', _initWASM);\n    _initWASM = null;\n  }\n}\naddEventListener('message', _initWASM)\n");n.WASM=e,n.default=function(n){return n=new e(n,1<arguments.length&&void 0!==arguments[1]?arguments[1]:{}),new Proxy(n,{get:function(n,t){return t in n?n[t]:t in n.exports?n.exports[t]:void 0},set:function(n,t,e){return!["malloc","free","exports","memory","HEAP8","HEAP16","HEAP32","HEAPU8","HEAPU16","HEAPU32","HEAPF32","HEAPF64"].includes(t)&&(n[t]=e,!0)}})},n.load=s,n.utils=l,n.worker=function(o,i){return new Promise(function(e,r){function n(n){var n=window.URL.createObjectURL(new Blob([u+n])),t=new Worker(n);"string"==typeof o?s(o).then(function(n){t.postMessage({type:a,mod:n})}).catch(r):t.postMessage({type:a,mod:o}),e(t)}var t;/^https?:\/\//.test(i)?fetch(i).then(function(n){return n.text()}).then(n):(t=document.querySelector(i))?n(t.textContent):r()})},Object.defineProperty(n,"__esModule",{value:!0})});