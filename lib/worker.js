"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _load = _interopRequireDefault(require("./load"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var type = 'wasminit';
var scripts = "\nconst UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;\nconst err = console.warn.bind(console);\nfunction warnOnce(text) {\n  if (!warnOnce.shown) warnOnce.shown = {};\n  if (!warnOnce.shown[text]) {\n    warnOnce.shown[text] = 1;\n    err(text);\n  }\n}\nfunction lengthBytesUTF8(str) {\n  var len = 0;\n  for (var i = 0; i < str.length; ++i) {\n    var u = str.charCodeAt(i);\n    if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;\n    if (u <= 127) ++len;\n    else if (u <= 2047) len += 2;\n    else if (u <= 65535) len += 3;\n    else len += 4;\n  }\n  return len;\n}\n/*\n * @description: c\u5B57\u7B26\u6570\u7EC4\u8F6Cjs\u5B57\u7B26\u4E32\n * @param {TpyeArray|ArrayBuffer} buffOrArr: \n * @param {Number} idx: \u5F00\u59CB\u5730\u5740\n * @param {Number} maxBytesToRead: \u8BFB\u53D6\u6570\u91CF\uFF08\u53EF\u9009\uFF09\n */\nfunction UTF8ToString(buffOrArr, idx, maxBytesToRead) {\n  const heap = buffOrArr instanceof ArrayBuffer ? new Uint8Array(buffOrArr) : buffOrArr;\n  var endIdx = idx + maxBytesToRead;\n  var endPtr = idx;\n  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;\n  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {\n    return UTF8Decoder.decode(heap.subarray(idx, endPtr));\n  } else {\n    var str = '';\n    while (idx < endPtr) {\n      var u0 = heap[idx++];\n      if (!(u0 & 128)) {\n        str += String.fromCharCode(u0);\n        continue;\n      }\n      var u1 = heap[idx++] & 63;\n      if ((u0 & 224) == 192) {\n        str += String.fromCharCode((u0 & 31) << 6 | u1);\n        continue;\n      }\n      var u2 = heap[idx++] & 63;\n      if ((u0 & 240) == 224) {\n        u0 = (u0 & 15) << 12 | u1 << 6 | u2;\n      } else {\n        if ((u0 & 248) != 240) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string in wasm memory to a JS string!');\n        u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heap[idx++] & 63;\n      }\n      if (u0 < 65536) {\n        str += String.fromCharCode(u0);\n      } else {\n        var ch = u0 - 65536;\n        str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);\n      }\n    }\n  }\n  return str;\n}\n/*\n * @description: c\u5B57\u7B26\u6570\u7EC4\u8F6Cjs\u5B57\u7B26\u4E32\n * @param {String} buffOrArr: \n * @param {TpyeArray|ArrayBuffer} heap: \n * @param {Number} outIdx: \u5F00\u59CB\u5730\u5740\n * @param {Number} maxBytesToWrite: \n */\nfunction stringToUTF8(str, buffOrArr, outIdx, maxBytesToWrite) {\n  if (!(maxBytesToWrite > 0)) return 0;\n  const heap = buffOrArr instanceof ArrayBuffer ? new Uint8Array(buffOrArr) : buffOrArr;\n  var startIdx = outIdx;\n  var endIdx = outIdx + maxBytesToWrite;\n  for (var i = 0; i < str.length; ++i) {\n    var u = str.charCodeAt(i);\n    if (u >= 55296 && u <= 57343) {\n      var u1 = str.charCodeAt(++i);\n      u = 65536 + ((u & 1023) << 10) | u1 & 1023;\n    }\n    if (u <= 127) {\n      if (outIdx >= endIdx) break;\n      heap[outIdx++] = u;\n    } else if (u <= 2047) {\n      if (outIdx + 1 >= endIdx) break;\n      heap[outIdx++] = 192 | u >> 6;\n      heap[outIdx++] = 128 | u & 63;\n    } else if (u <= 65535) {\n      if (outIdx + 2 >= endIdx) break;\n      heap[outIdx++] = 224 | u >> 12;\n      heap[outIdx++] = 128 | u >> 6 & 63;\n      heap[outIdx++] = 128 | u & 63;\n    } else {\n      if (outIdx + 3 >= endIdx) break;\n      if (u >= 2097152) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x1FFFFF).');\n      heap[outIdx++] = 240 | u >> 18;\n      heap[outIdx++] = 128 | u >> 12 & 63;\n      heap[outIdx++] = 128 | u >> 6 & 63;\n      heap[outIdx++] = 128 | u & 63;\n    }\n  }\n  heap[outIdx] = 0;\n  return outIdx - startIdx;\n}\n\nvar utils = {\n  lengthBytesUTF8,\n\tstringToUTF8,\n\tUTF8ToString\n}\n\nfunction WASM(instance, importObject) {\n  this.HEAP8 = null;\n  this.HEAP16 = null;\n  this.HEAP32 = null;\n  this.HEAPU8 = null;\n  this.HEAPU16 = null;\n  this.HEAPU32 = null;\n  this.HEAPF32 = null;\n  this.HEAPF64 = null;\n  this.exports = null;\n  this.memory = null;\n  this.module = null;\n  this.stack = 0;\n\n  const callbacks = [];\n  let isInit = false;\n  const init = ({ exports }) => {\n    if (!exports) throw new Error('no exports');\n    isInit = true;\n    if (typeof exports.memory === 'object') {\n      this.memory = exports.memory;\n    } else if (typeof importObject.env.memory === 'object') {\n      this.memory = importObject.env.memory;\n    } else {\n      throw new Error('no memory buffer');\n    }\n    const buf = this.memory.buffer;\n    this.HEAP8 = new Int8Array(buf);\n    this.HEAP16 = new Int16Array(buf);\n    this.HEAP32 = new Int32Array(buf);\n    this.HEAPU8 = new Uint8Array(buf);\n    this.HEAPU16 = new Uint16Array(buf);\n    this.HEAPU32 = new Uint32Array(buf);\n    this.HEAPF32 = new Float32Array(buf);\n    this.HEAPF64 = new Float64Array(buf);\n    this.exports = exports;\n    callbacks.forEach(fn => fn.call(this, false));\n    callbacks.length = 0;\n  };\n  this.ready = (fn) => {\n    if (typeof fn !== 'function') return;\n    if (isInit) fn.call(this, true);\n    else callbacks.push(fn);\n  };\n  if (instance instanceof WebAssembly.Instance) {\n    init(instance);\n  } else {\n    load(instance, importObject).then((res) => {\n      this.module = res.module;\n      init(res.instance);\n    });\n  }\n}\n/*\n * @description: \u8C03\u7528c\u51FD\u6570\n * @param {String} ident: c\u51FD\u6570\u540D\u79F0\n * @param {String} returnType: \u8FD4\u56DE\u503C\u7C7B\u578B{string|number|boolean|null}\n * @param {Array} args: \u53C2\u6570\u6570\u7EC4\n * @return {Any}\n */\nWASM.prototype.ccall = function (ident, returnType, args) {\n  const exports = this.exports;\n  const self = this;\n  var toC = {\n    'string': function (str) {\n      var ret = 0;\n      if (str !== null && str !== undefined && str !== 0) {\n        var len = (str.length << 2) + 1;\n        ret = exports.stackAlloc(len);\n        utils.stringToUTF8(str, self.HEAPU8, ret, len);\n      }\n      return ret;\n    },\n    'array': function (arr) {\n      const bytes = self.HEAP32.BYTES_PER_ELEMENT;\n      var ret = exports.stackAlloc(arr.length * bytes);\n      self.HEAP32.set(arr, ret / bytes);\n      return ret;\n    }\n  };\n\n  function convertReturnValue(ret) {\n    if (returnType === 'string') return utils.UTF8ToString(self.HEAPU8, ret);\n    if (returnType === 'boolean') return Boolean(ret);\n    return ret;\n  }\n  var cArgs = [];\n  var stack = 0;\n  if (args) {\n    for (var i = 0; i < args.length; i++) {\n      const type = Array.isArray(args[i]) ? 'array' : typeof args[i];\n      var converter = toC[type];\n      if (converter) {\n        if (stack === 0) stack = exports.stackSave();\n        cArgs[i] = converter(args[i]);\n      } else {\n        cArgs[i] = args[i];\n      }\n    }\n  }\n  var ret = exports[ident].apply(null, cArgs);\n  ret = convertReturnValue(ret);\n  if (stack !== 0) exports.stackRestore(stack);\n  return ret;\n};\n/*\n * @description: \u4ECE\u5185\u5B58\u83B7\u53D6\u5B57\u7B26\u4E32\n * @param {Number} ptr: buffer offset\n * @param {Number} size: \u5B57\u7B26\u4E32\u957F\u5EA6\uFF08\u53EF\u9009\uFF09\n * @return {String}\n */\nWASM.prototype.mem2str = function (ptr, size) {\n  return utils.UTF8ToString(this.HEAPU8, ptr, size);\n};\n/*\n * @description: \u628A\u5B57\u7B26\u4E32\u653E\u5165\u5185\u5B58\n * @param {String} str: \u5B57\u7B26\u4E32\n * @return {Number} buffer offset\n */\nWASM.prototype.str2mem = function (str) {\n  const size = utils.lengthBytesUTF8(str);\n  const ptr = this.malloc(size + 1);\n  utils.stringToUTF8(str, this.HEAPU8, ptr, size);\n  return ptr;\n};\n/*\n * @description: \u628A\u6570\u7EC4\u653E\u5165\u5185\u5B58\n * @param {Array} arr: \u6570\u7EC4\n * @param {String} type: \u7C7B\u578B\uFF08\u53EF\u9009\uFF09\n * @return {Number} buffer offset\n */\nWASM.prototype.arr2mem = function (arr, type = 'i32') {\n  const heap = this.heap(type);\n  const bytes = heap.BYTES_PER_ELEMENT;\n  const ptr = this.malloc(arr.length * bytes);\n  heap.set(arr, ptr / bytes);\n  return ptr;\n};\n/*\n * @description: \u4ECE\u5185\u5B58\u8BFB\u53D6\u6570\u7EC4\n * @param {Number} ptr: buffer offset\n * @param {Number} length: \u8BFB\u53D6\u957F\u5EA6\n * @param {String} type: \u7C7B\u578B\uFF08\u53EF\u9009\uFF09\n * @return {Array}\n */\nWASM.prototype.mem2arr = function (ptr, length, type = 'i32') {\n  const heap = this.heap(type);\n  const pos = ptr / heap.BYTES_PER_ELEMENT;\n  return Array.from(heap.subarray(pos, pos + length));\n};\n/*\n * @description: \u5206\u914D\u5185\u5B58\n * @param {Number} bytes: \u5B57\u8282\u957F\u5EA6\n * @return {Number}\n */\nWASM.prototype.malloc = function (bytes) {\n  const exports = this.exports;\n  let ptr = 0;\n  if (typeof exports.malloc === 'function') {\n    ptr = exports.malloc(bytes);\n  } else {\n    const stack = exports.stackSave();\n    if (bytes > stack) {\n      throw new Error('stack overflow');\n    }\n    if (this.stack === 0) {\n      this.stack = stack;\n    }\n    ptr = exports.stackAlloc(bytes);\n  }\n  return ptr;\n};\n/*\n * @description: \u91CA\u653E\u5185\u5B58\n * @param {...Number} args: buffer offset\n */\nWASM.prototype.free = function (...args) {\n  const exports = this.exports;\n  if (typeof exports.free === 'function') {\n    args.forEach((ptr) => {\n      exports.free(ptr);\n    });\n  }\n  if (this.stack) {\n    exports.stackRestore(this.stack);\n    this.stack = 0;\n  }\n};\n/*\n * @description: \u83B7\u53D6\u5185\u5B58\n * @param {String} type: i32:HEAP32,i8:HEAP8,i16:HEAP16,u8:HEAPU8,u16:HEAPU16,u32:HEAPU32,float:HEAPF32,double:HEAPF64\n * @return {TypeArray}\n */\nWASM.prototype.heap = function (type = 'i32') {\n  switch (type) {\n  case 'i8':\n    return this.HEAP8;\n  case 'i16':\n    return this.HEAP16;\n  case 'u8':\n    return this.HEAPU8;\n  case 'u16':\n    return this.HEAPU16;\n  case 'u32':\n    return this.HEAPU32;\n  case 'float':\n    return this.HEAPF32;\n  case 'double':\n    return this.HEAPF64;\n  default:\n    return this.HEAP32;\n  }\n};\n\nlet _instance = null;\nvar wasm = null;\nlet _defaultFn = function () {}\nif (typeof importObject !== 'object') {\n  importObject = {};\n}\nif (typeof importObject.env !== 'object') {\n  importObject.env = {}\n}\nimportObject.env.emscripten_resize_heap = importObject.env.emscripten_resize_heap || _defaultFn;\nimportObject.env.emscripten_memcpy_big = importObject.env.emscripten_memcpy_big || _defaultFn;\nlet _initWASM = function (e) {\n  if (e.data.type === '".concat(type, "') {\n    WebAssembly.instantiate(e.data.mod, importObject).then(function(instance) {\n      _instance = instance;\n      wasm = new Proxy(new WASM(instance), {\n        get: (obj, k) => {\n          if (k in obj) {\n            return obj[k]\n          }\n          if (k in obj.exports) {\n            return obj.exports[k]\n          }\n        },\n        set: (obj, k, val) => {\n          const exclude = [\n            'malloc',\n            'free',\n            'exports',\n            'memory',\n            'HEAP8',\n            'HEAP16',\n            'HEAP32',\n            'HEAPU8',\n            'HEAPU16',\n            'HEAPU32',\n            'HEAPF32',\n            'HEAPF64',\n          ]\n          if (exclude.includes(k)) {\n            return false\n          }\n          obj[k] = val\n          return true\n        }\n      })\n      postMessage({\n        type: 'wasmready'\n      })\n    });\n    removeEventListener('message', _initWASM);\n    _initWASM = null;\n  }\n}\naddEventListener('message', _initWASM)\n");
/*
 * @description: 生成worker
 * @param {String|Object} urlOrModule: wasm地址或者已编译module
 * @param {String} urlOrSelector: url地址或者dom选择器
 * @return {Promise<Worker>}
 */

function createWorker(urlOrModule, urlOrSelector) {
  return new Promise(function (resolve, reject) {
    // 把wasm塞入worker
    var init = function init(text) {
      var url = window.URL.createObjectURL(new Blob([scripts + text]));

      if (typeof urlOrModule === 'string') {
        (0, _load["default"])(urlOrModule).then(function (mod) {
          var worker = new Worker(url);
          worker.postMessage({
            type: type,
            mod: mod
          });
          resolve(worker);
        })["catch"](reject);
      } else {
        var worker = new Worker(url);
        worker.postMessage({
          type: type,
          mod: urlOrModule
        });
        resolve(worker);
      }
    };

    if (/^https?:\/\//.test(urlOrSelector)) {
      fetch(urlOrSelector).then(function (response) {
        return response.text();
      }).then(function (text) {
        return init(text);
      })["catch"](reject);
    } else {
      var dom = document.querySelector(urlOrSelector);

      if (dom) {
        init(dom.textContent);
      } else {
        reject();
      }
    }
  });
}

var _default = createWorker;
exports["default"] = _default;