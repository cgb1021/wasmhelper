"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _load = _interopRequireDefault(require("./load"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var scripts = "\nconst UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined\nconst err = console.warn.bind(console)\nfunction warnOnce(text) {\n\tif (!warnOnce.shown) warnOnce.shown = {}\n\tif (!warnOnce.shown[text]) {\n\t\twarnOnce.shown[text] = 1\n\t\terr(text)\n\t}\n}\nfunction lengthBytesUTF8(str) {\n\tvar len = 0\n\tfor (var i = 0; i < str.length; ++i) {\n\t\tvar u = str.charCodeAt(i)\n\t\tif (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023\n\t\tif (u <= 127) ++len\n\t\telse if (u <= 2047) len += 2\n\t\telse if (u <= 65535) len += 3\n\t\telse len += 4\n\t}\n\treturn len\n}\n/*\n * @description: c\u5B57\u7B26\u6570\u7EC4\u8F6Cjs\u5B57\u7B26\u4E32\n * @param {TpyeArray|ArrayBuffer} buffOrArr: \n * @param {Number} idx: \u5F00\u59CB\u5730\u5740\n * @param {Number} maxBytesToRead: \u8BFB\u53D6\u6570\u91CF\uFF08\u53EF\u9009\uFF09\n */\nfunction UTF8ToString(buffOrArr, idx, maxBytesToRead) {\n\tconst heap = buffOrArr instanceof ArrayBuffer ? new Uint8Array(buffOrArr) : buffOrArr\n\tvar endIdx = idx + maxBytesToRead\n\tvar endPtr = idx\n\twhile (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr\n\tif (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {\n\t\treturn UTF8Decoder.decode(heap.subarray(idx, endPtr))\n\t} else {\n\t\tvar str = ''\n\t\twhile (idx < endPtr) {\n\t\t\tvar u0 = heap[idx++]\n\t\t\tif (!(u0 & 128)) {\n\t\t\t\tstr += String.fromCharCode(u0)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tvar u1 = heap[idx++] & 63\n\t\t\tif ((u0 & 224) == 192) {\n\t\t\t\tstr += String.fromCharCode((u0 & 31) << 6 | u1)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tvar u2 = heap[idx++] & 63\n\t\t\tif ((u0 & 240) == 224) {\n\t\t\t\tu0 = (u0 & 15) << 12 | u1 << 6 | u2\n\t\t\t} else {\n\t\t\t\tif ((u0 & 248) != 240) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string in wasm memory to a JS string!')\n\t\t\t\tu0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heap[idx++] & 63\n\t\t\t}\n\t\t\tif (u0 < 65536) {\n\t\t\t\tstr += String.fromCharCode(u0)\n\t\t\t} else {\n\t\t\t\tvar ch = u0 - 65536\n\t\t\t\tstr += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023)\n\t\t\t}\n\t\t}\n\t}\n\treturn str\n}\n/*\n * @description: c\u5B57\u7B26\u6570\u7EC4\u8F6Cjs\u5B57\u7B26\u4E32\n * @param {String} buffOrArr: \n * @param {TpyeArray|ArrayBuffer} heap: \n * @param {Number} outIdx: \u5F00\u59CB\u5730\u5740\n * @param {Number} maxBytesToWrite: \n */\nfunction stringToUTF8(str, buffOrArr, outIdx, maxBytesToWrite) {\n\tif (!(maxBytesToWrite > 0)) return 0\n\tconst heap = buffOrArr instanceof ArrayBuffer ? new Uint8Array(buffOrArr) : buffOrArr\n\tvar startIdx = outIdx\n\tvar endIdx = outIdx + maxBytesToWrite\n\tfor (var i = 0; i < str.length; ++i) {\n\t\tvar u = str.charCodeAt(i)\n\t\tif (u >= 55296 && u <= 57343) {\n\t\t\tvar u1 = str.charCodeAt(++i)\n\t\t\tu = 65536 + ((u & 1023) << 10) | u1 & 1023\n\t\t}\n\t\tif (u <= 127) {\n\t\t\tif (outIdx >= endIdx) break\n\t\t\theap[outIdx++] = u\n\t\t} else if (u <= 2047) {\n\t\t\tif (outIdx + 1 >= endIdx) break\n\t\t\theap[outIdx++] = 192 | u >> 6\n\t\t\theap[outIdx++] = 128 | u & 63\n\t\t} else if (u <= 65535) {\n\t\t\tif (outIdx + 2 >= endIdx) break\n\t\t\theap[outIdx++] = 224 | u >> 12\n\t\t\theap[outIdx++] = 128 | u >> 6 & 63\n\t\t\theap[outIdx++] = 128 | u & 63\n\t\t} else {\n\t\t\tif (outIdx + 3 >= endIdx) break\n\t\t\tif (u >= 2097152) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x1FFFFF).')\n\t\t\theap[outIdx++] = 240 | u >> 18\n\t\t\theap[outIdx++] = 128 | u >> 12 & 63\n\t\t\theap[outIdx++] = 128 | u >> 6 & 63\n\t\t\theap[outIdx++] = 128 | u & 63\n\t\t}\n\t}\n\theap[outIdx] = 0\n\treturn outIdx - startIdx\n}\n\n\nfunction WASM(instance, importObject) {\n\tthis.HEAP8 = null\n\tthis.HEAP16 = null\n\tthis.HEAP32 = null\n\tthis.HEAPU8 = null\n\tthis.HEAPU16 = null\n\tthis.HEAPU32 = null\n\tthis.HEAPF32 = null\n\tthis.HEAPF64 = null\n\tthis.exports = null\n\tthis.memory = null\n\tthis.stack = 0\n\tconst init = (exports) => {\n\t\tif (typeof exports.memory === 'object') {\n\t\t\tthis.memory = exports.memory\n\t\t} else if (typeof importObject.env.memory === 'object') {\n\t\t\tthis.memory = importObject.env.memory\n\t\t} else {\n\t\t\tthrow new Error('no memory buffer')\n\t\t}\n\t\tconst buf = this.memory.buffer\n\t\tthis.HEAP8 = new Int8Array(buf)\n\t\tthis.HEAP16 = new Int16Array(buf)\n\t\tthis.HEAP32 = new Int32Array(buf)\n\t\tthis.HEAPU8 = new Uint8Array(buf)\n\t\tthis.HEAPU16 = new Uint16Array(buf)\n\t\tthis.HEAPU32 = new Uint32Array(buf)\n\t\tthis.HEAPF32 = new Float32Array(buf)\n\t\tthis.HEAPF64 = new Float64Array(buf)\n\t\tthis.exports = exports\n\t}\n\tif (typeof instance === 'string') {\n\t\tlet callback = typeof importObject.ready === 'function' ? importObject.ready : null\n\t\tdelete importObject.ready\n\t\tload(instance, importObject).then((res) => {\n\t\t\tinit(res.instance.exports)\n\t\t\tif (callback) {\n\t\t\t\tcallback.call(this, instance)\n\t\t\t\tcallback = null\n\t\t\t}\n\t\t})\n\t} else {\n\t\tinit(instance.exports)\n\t}\n}\n/*\n * @description: \u8C03\u7528c\u51FD\u6570\n * @param {String} ident: c\u51FD\u6570\u540D\u79F0\n * @param {String} returnType: \u8FD4\u56DE\u503C\u7C7B\u578B{string|number|boolean|null}\n * @param {Array} args: \u53C2\u6570\u6570\u7EC4\n * @return {Any}\n */\nWASM.prototype.ccall = function (ident, returnType, args) {\n\tconst exports = this.exports\n\tconst self = this\n\tvar toC = {\n\t\t'string': function (str) {\n\t\t\tvar ret = 0\n\t\t\tif (str !== null && str !== undefined && str !== 0) {\n\t\t\t\tvar len = (str.length << 2) + 1\n\t\t\t\tret = exports.stackAlloc(len)\n\t\t\t\tutils.stringToUTF8(str, self.HEAPU8, ret, len)\n\t\t\t}\n\t\t\treturn ret\n\t\t},\n\t\t'array': function (arr) {\n\t\t\tconst bytes = self.HEAP32.BYTES_PER_ELEMENT\n\t\t\tvar ret = exports.stackAlloc(arr.length * bytes)\n\t\t\tself.HEAP32.set(arr, ret / bytes)\n\t\t\treturn ret\n\t\t}\n\t}\n\n\tfunction convertReturnValue(ret) {\n\t\tif (returnType === 'string') return utils.UTF8ToString(self.HEAPU8, ret)\n\t\tif (returnType === 'boolean') return Boolean(ret)\n\t\treturn ret\n\t}\n\tvar cArgs = []\n\tvar stack = 0\n\tif (args) {\n\t\tfor (var i = 0; i < args.length; i++) {\n\t\t\tconst type = Array.isArray(args[i]) ? 'array' : typeof args[i]\n\t\t\tvar converter = toC[type]\n\t\t\tif (converter) {\n\t\t\t\tif (stack === 0) stack = exports.stackSave()\n\t\t\t\tcArgs[i] = converter(args[i])\n\t\t\t} else {\n\t\t\t\tcArgs[i] = args[i]\n\t\t\t}\n\t\t}\n\t}\n\tvar ret = exports[ident].apply(null, cArgs)\n\tret = convertReturnValue(ret)\n\tif (stack !== 0) exports.stackRestore(stack)\n\treturn ret\n}\n/*\n * @description: \u4ECE\u5185\u5B58\u83B7\u53D6\u5B57\u7B26\u4E32\n * @param {Number} ptr: buffer offset\n * @param {Number} size: \u5B57\u7B26\u4E32\u957F\u5EA6\uFF08\u53EF\u9009\uFF09\n * @return {String}\n */\nWASM.prototype.mem2str = function (ptr, size) {\n\treturn utils.UTF8ToString(this.HEAPU8, ptr, size)\n}\n/*\n * @description: \u628A\u5B57\u7B26\u4E32\u653E\u5165\u5185\u5B58\n * @param {String} str: \u5B57\u7B26\u4E32\n * @return {Number} buffer offset\n */\nWASM.prototype.str2mem = function (str) {\n\tconst size = utils.lengthBytesUTF8(str)\n\tconst ptr = this.malloc(size + 1)\n\tutils.stringToUTF8(str, this.HEAPU8, ptr, size)\n\treturn ptr\n}\n/*\n * @description: \u628A\u6570\u7EC4\u653E\u5165\u5185\u5B58\n * @param {Array} arr: \u6570\u7EC4\n * @param {String} type: \u7C7B\u578B\uFF08\u53EF\u9009\uFF09\n * @return {Number} buffer offset\n */\nWASM.prototype.arr2mem = function (arr, type = 'i32') {\n\tconst heap = this.heap(type)\n\tconst bytes = heap.BYTES_PER_ELEMENT\n\tconst ptr = this.malloc(arr.length * bytes)\n\theap.set(arr, ptr / bytes)\n\treturn ptr\n}\n/*\n * @description: \u4ECE\u5185\u5B58\u8BFB\u53D6\u6570\u7EC4\n * @param {Number} ptr: buffer offset\n * @param {Number} length: \u8BFB\u53D6\u957F\u5EA6\n * @param {String} type: \u7C7B\u578B\uFF08\u53EF\u9009\uFF09\n * @return {Array}\n */\nWASM.prototype.mem2arr = function (ptr, length, type = 'i32') {\n\tconst heap = this.heap(type)\n\tconst pos = ptr / heap.BYTES_PER_ELEMENT\n\treturn Array.from(heap.subarray(pos, pos + length))\n}\n/*\n * @description: \u5206\u914D\u5185\u5B58\n * @param {Number} bytes: \u5B57\u8282\u957F\u5EA6\n * @return {Number}\n */\nWASM.prototype.malloc = function (bytes) {\n\tconst exports = this.exports\n\tlet ptr = 0\n\tif (typeof exports.malloc === 'function') {\n\t\tptr = exports.malloc(bytes)\n\t} else {\n\t\tconst stack = exports.stackSave()\n\t\tif (bytes > stack) {\n\t\t\tthrow new Error('stack overflow')\n\t\t}\n\t\tif (this.stack === 0) {\n\t\t\tthis.stack = stack\n\t\t}\n\t\tptr = exports.stackAlloc(bytes)\n\t}\n\treturn ptr\n}\n/*\n * @description: \u6E05\u7406\u5185\u5B58\n * @param {...Number} args: buffer offset\n */\nWASM.prototype.free = function (...args) {\n\tconst exports = this.exports\n\tif (typeof exports.free === 'function') {\n\t\targs.forEach((ptr) => {\n\t\t\texports.free(ptr)\n\t\t})\n\t}\n\tif (this.stack) {\n\t\texports.stackRestore(this.stack)\n\t\tthis.stack = 0\n\t}\n}\n/*\n * @description: \u83B7\u53D6\u5185\u5B58\n * @param {String} type: i32:HEAP32,i8:HEAP8,i16:HEAP16,u8:HEAPU8,u16:HEAPU16,u32:HEAPU32,float:HEAPF32,double:HEAPF64\n * @return {TypeArray}\n */\nWASM.prototype.heap = function (type = 'i32') {\n\tswitch (type) {\n\tcase 'i8':\n\t\treturn this.HEAP8\n\tcase 'i16':\n\t\treturn this.HEAP16\n\tcase 'u8':\n\t\treturn this.HEAPU8\n\tcase 'u16':\n\t\treturn this.HEAPU16\n\tcase 'u32':\n\t\treturn this.HEAPU32\n\tcase 'float':\n\t\treturn this.HEAPF32\n\tcase 'double':\n\t\treturn this.HEAPF64\n\tdefault:\n\t\treturn this.HEAP32\n\t}\n}\n\nlet _instance = null;\nlet wasm = null;\nlet _defaultFn = function () {}\nif (typeof importObject !== 'object') {\n  importObject = {};\n}\nif (typeof importObject.env !== 'object') {\n  importObject.env = {}\n}\nimportObject.env.emscripten_resize_heap = importObject.env.emscripten_resize_heap || _defaultFn;\nimportObject.env.emscripten_memcpy_big = importObject.env.emscripten_memcpy_big || _defaultFn;\nlet _initWASM = function (e) {\n  if (e.data.type === '{{type}}') {\n    WebAssembly.instantiate(e.data.mod, importObject).then(function(instance) {\n      _instance = instance;\n      wasm = new Proxy(new WASM(instance), {\n        get: (obj, k) => {\n          if (k in obj) {\n            return obj[k]\n          }\n          if (k in obj.exports) {\n            return obj.exports[k]\n          }\n        },\n        set: (obj, k, val) => {\n          const exclude = [\n            'malloc',\n            'free',\n            'exports',\n            'memory',\n            'HEAP8',\n            'HEAP16',\n            'HEAP32',\n            'HEAPU8',\n            'HEAPU16',\n            'HEAPU32',\n            'HEAPF32',\n            'HEAPF64',\n          ]\n          if (exclude.includes(k)) {\n            return false\n          }\n          obj[k] = val\n          return true\n        }\n      })\n      postMessage({\n        type: 'ready'\n      })\n    });\n    removeEventListener('message', _initWASM);\n    _initWASM = null;\n  }\n}\naddEventListener('message', _initWASM)\n";

function createWorker(urlOrModule, workerSelector) {
  // 把wasm塞入worker
  var url = null;
  var type = "_insertMod".concat(Date.now());
  var appendScripts = scripts.replace('{{type}}', type);
  var dom = document.querySelector(workerSelector);

  if (dom) {
    url = window.URL.createObjectURL(new Blob([dom.textContent + appendScripts]));
  }

  var worker = new Worker(url);

  if (typeof urlOrModule === 'string') {
    (0, _load["default"])(urlOrModule).then(function (mod) {
      worker.postMessage({
        type: type,
        mod: mod
      });
    });
  } else {
    worker.postMessage({
      type: type,
      mod: urlOrModule
    });
  }

  return worker;
}

var _default = createWorker;
exports["default"] = _default;